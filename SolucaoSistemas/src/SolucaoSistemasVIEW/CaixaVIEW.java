/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SolucaoSistemasVIEW;

import SolucaoSistemasCTR.CaixaCTR;
import SolucaoSistemasCTR.ContasReceberCTR;
import SolucaoSistemasCTR.EntradaCTR;
import SolucaoSistemasCTR.HistoricoPagarCTR;
import SolucaoSistemasCTR.HistoricoReceberCTR;
import SolucaoSistemasCTR.PlanocontasCTR;
import SolucaoSistemasCTR.SaidaCTR;
import SolucaoSistemasCTR.UsuarioCTR;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;

/**
 *
 * @author Batman
 */
public class CaixaVIEW extends javax.swing.JDialog {

    PlanocontasCTR objplanoCTR = new PlanocontasCTR();
    ResultSet rs;
    public String func = "";
    CaixaCTR objcaixaCTR = new CaixaCTR();
    EntradaCTR objentradaCTR = new EntradaCTR();
    SaidaCTR objsaidaCTR = new SaidaCTR();
    Date dataLancamento = null;
    NumberFormat numeroCaixa = DecimalFormat.getCurrencyInstance(
            new Locale("pt", "BR"));
    String quitar = "";
    /**
     * Creates new form CaixaVIEW
     */
    public CaixaVIEW(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("MOVIMENTO DO CAIXA");
        UtilVIEW.Icone(this);
        UtilVIEW.FormatarCampo(txtValor);
        ConsultarFuncionario();
        ConsultarLancamentos();
        if (OpcaoFechamentoVIEW.vista == true && VendaVIEW.finalizarPedido == false) {
            rbEntrada.setSelected(true);
            txtValor.setText(numeroCaixa.format(AtendimentoVIEW.finalizarAtendimento));
            ConsultarPlanoContas("3. RECEITA", "3. RECEITA");
        } else if (OpcaoFechamentoVIEW.vista == true && VendaVIEW.finalizarPedido == true
                && PrincipalVIEW.compra == false) {
            rbEntrada.setSelected(true);
            txtValor.setText(numeroCaixa.format(VendaVIEW.totalPedido));
            ConsultarPlanoContas("3. RECEITA", "3. RECEITA");
        } else if (OpcaoFechamentoVIEW.vista == true && VendaVIEW.finalizarPedido == true
                && PrincipalVIEW.compra == true) {
            rbSaida.setSelected(true);
            txtValor.setText(numeroCaixa.format(VendaVIEW.totalPedido));
            ConsultarPlanoContas("4. DESPESA", "5. TRANSFERÊNCIA");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoCaixa = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        txtLancamento = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtData = new javax.swing.JFormattedTextField();
        rbEntrada = new javax.swing.JCheckBox();
        rbSaida = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        txtValor = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cbxForma = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtObservacao = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setText("Lançamento:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 110, 14);

        txtLancamento.setEditable(false);
        txtLancamento.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txtLancamento.setForeground(new java.awt.Color(0, 0, 204));
        txtLancamento.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        getContentPane().add(txtLancamento);
        txtLancamento.setBounds(10, 30, 100, 21);

        jLabel2.setText("Data:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(120, 10, 50, 14);

        try {
            txtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtData.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDataFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDataFocusLost(evt);
            }
        });
        txtData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDataKeyPressed(evt);
            }
        });
        getContentPane().add(txtData);
        txtData.setBounds(120, 30, 80, 20);

        grupoCaixa.add(rbEntrada);
        rbEntrada.setText("Entrada");
        rbEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEntradaActionPerformed(evt);
            }
        });
        getContentPane().add(rbEntrada);
        rbEntrada.setBounds(210, 30, 63, 23);

        grupoCaixa.add(rbSaida);
        rbSaida.setText("Saída");
        rbSaida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSaidaActionPerformed(evt);
            }
        });
        getContentPane().add(rbSaida);
        rbSaida.setBounds(270, 30, 51, 23);

        jLabel3.setText("Valor:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 60, 70, 14);

        txtValor.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txtValor.setForeground(new java.awt.Color(0, 0, 204));
        txtValor.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtValor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtValorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtValorFocusLost(evt);
            }
        });
        txtValor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtValorKeyPressed(evt);
            }
        });
        getContentPane().add(txtValor);
        txtValor.setBounds(10, 80, 100, 21);

        jLabel4.setText("Forma de Pagamento:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(120, 60, 130, 14);

        cbxForma.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));
        cbxForma.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cbxFormaKeyPressed(evt);
            }
        });
        getContentPane().add(cbxForma);
        cbxForma.setBounds(120, 80, 250, 20);

        jLabel5.setText("Histórico / Observação:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 110, 190, 14);

        txtObservacao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtObservacaoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtObservacaoFocusLost(evt);
            }
        });
        getContentPane().add(txtObservacao);
        txtObservacao.setBounds(10, 130, 600, 20);

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/7881_32x32.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalvar);
        btnSalvar.setBounds(380, 63, 110, 40);

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/casa_32x32.png"))); // NOI18N
        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });
        getContentPane().add(btnSair);
        btnSair.setBounds(500, 63, 90, 40);

        setBounds(0, 0, 632, 208);
    }// </editor-fold>//GEN-END:initComponents

    private void rbEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEntradaActionPerformed
        txtValor.requestFocusInWindow();
        txtValor.setForeground(new Color(0, 0, 204));
        ConsultarPlanoContas("3. RECEITA", "3. RECEITA");
    }//GEN-LAST:event_rbEntradaActionPerformed

    private void rbSaidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSaidaActionPerformed
        txtValor.requestFocusInWindow();
        txtValor.setForeground(new Color(255, 0, 0));
        ConsultarPlanoContas("4. DESPESA", "5. TRANSFERÊNCIA");
    }//GEN-LAST:event_rbSaidaActionPerformed

    private void txtValorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorKeyPressed
        try {
            if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
                txtValor.setText(numeroCaixa.format(Double.parseDouble(
                        txtValor.getText().replace("R$", "").replace(".", "").replace(",", "."))));
                cbxForma.requestFocusInWindow();
            }

        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtValorKeyPressed

    private void cbxFormaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cbxFormaKeyPressed
        try {
            if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
                txtObservacao.requestFocusInWindow();
            }

        } catch (Exception e) {
        }
    }//GEN-LAST:event_cbxFormaKeyPressed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        try {
            if (rbEntrada.isSelected() == false && rbSaida.isSelected() == false) {
                JOptionPane.showMessageDialog(null, "Entrada ou saída?", "MENSAGEM",
                        JOptionPane.QUESTION_MESSAGE);
            } else if (txtValor.getText().equals("R$ 0,00") || txtValor.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Preencher o campo valor!", "MENSAGEM",
                        JOptionPane.WARNING_MESSAGE);
                txtValor.requestFocusInWindow();
            } else {
                int confirma = -1;
                confirma = JOptionPane.showConfirmDialog(null, "O valor está correto?",
                        "MENSAGEM", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (confirma == 0) {
                    dataLancamento = new SimpleDateFormat("dd/MM/yyyy").parse(txtData.getText());
                    if (PesquisarFinanceiroVIEW.codigoLancamento.equals("")) {
                        CadastrarCaixa();
                        if(PesquisarFinanceiroVIEW.codigoParcela.equals("")){
                            
                        }else {
                            int pergunta = -1;
                            pergunta = JOptionPane.showConfirmDialog(null, "Quitar parcela?", 
                                    "MENSAGEM", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                            if(pergunta == 0){
                                quitar = "SIM";
                            }else if(pergunta == 1){
                                quitar = "NAO";
                            }
                            
                            CadastrarHistoricoPagamento();
                            PesquisarFinanceiroVIEW.codigoParcela = "";
                             this.dispose();
                            new PesquisarFinanceiroVIEW(null, true).setVisible(true);
                        }
                    } else {
                        AlterarCaixa();

                    }

                    this.dispose();
                    if (OpcaoFechamentoVIEW.vista == true && VendaVIEW.finalizarPedido == false) {
                        OpcaoFechamentoVIEW.vista = false;
                        new AtendimentoVIEW(null, true).setVisible(true);

                    } else if (OpcaoFechamentoVIEW.vista == true && VendaVIEW.finalizarPedido == true) {
                        OpcaoFechamentoVIEW.vista = false;
                        VendaVIEW.finalizarPedido = false;
                        PesquisarPedidosVIEW.codigoAlpha = "";
                        new VendaVIEW(null, true).setVisible(true);
                        
                    }
                } else if (confirma == 1) {

                }
            }

        } catch (HeadlessException | ParseException e) {
        }
    }//GEN-LAST:event_btnSalvarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        txtData.requestFocusInWindow();
    }//GEN-LAST:event_formWindowOpened

    private void txtValorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorFocusGained
        try {
            txtValor.setBackground(new Color(255, 255, 204));
            txtValor.setText("");
        } catch (Exception e) {
        }

    }//GEN-LAST:event_txtValorFocusGained

    private void txtDataFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDataFocusGained
        try {
            txtData.setBackground(new Color(255, 255, 204));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtDataFocusGained

    private void txtDataFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDataFocusLost
        try {
            txtData.setBackground(Color.WHITE);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtDataFocusLost

    private void txtValorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorFocusLost
        try {
            txtValor.setBackground(Color.WHITE);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtValorFocusLost

    private void txtObservacaoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtObservacaoFocusLost
        try {
            txtObservacao.setBackground(Color.WHITE);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtObservacaoFocusLost

    private void txtObservacaoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtObservacaoFocusGained
        try {
            txtObservacao.setBackground(new Color(255, 255, 204));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtObservacaoFocusGained

    private void txtDataKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataKeyPressed
        try {
            if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
                txtValor.requestFocusInWindow();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtDataKeyPressed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        OpcaoFechamentoVIEW.vista = false;
        VendaVIEW.finalizarPedido = false;
        this.dispose();
    }//GEN-LAST:event_btnSairActionPerformed

    private void CadastrarCaixa() {
        try {

            if (objcaixaCTR.CadastrarCaixaCTR(func, new SimpleDateFormat("yyyy-MM-dd").
                    format(dataLancamento))) {
                if (rbEntrada.isSelected() == true) {
                    objentradaCTR.CadastrarEntradaCTR("CAIXA GERAL", txtValor.getText(), "ENTRADA",
                            String.valueOf(cbxForma.getSelectedItem()), txtObservacao.getText());
                } else if (rbSaida.isSelected() == true) {
                    objsaidaCTR.CadastrarSaidaCTR("CAIXA GERAL", txtValor.getText(), "SAIDA",
                            String.valueOf(cbxForma.getSelectedItem()), txtObservacao.getText());
                }
                JOptionPane.showMessageDialog(null, "Salvo com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar!", "MENSAGEM", JOptionPane.WARNING_MESSAGE);
        }

    }

    private void AlterarCaixa() {
        try {

            if (objcaixaCTR.AlterarCaixaCTR(func, new SimpleDateFormat("yyyy-MM-dd").
                    format(dataLancamento), PesquisarFinanceiroVIEW.codigoLancamento)) {
                if (String.valueOf(PesquisarFinanceiroVIEW.tblFinanceiro.getValueAt(
                        PesquisarFinanceiroVIEW.tblFinanceiro.getSelectedRow(), 8)).equals("ENTRADA")) {
                    objentradaCTR.AlterarEntradaCTR(txtValor.getText(),
                            String.valueOf(cbxForma.getSelectedItem()), txtObservacao.getText(),
                            PesquisarFinanceiroVIEW.codigoLancamento);
                } else if (String.valueOf(PesquisarFinanceiroVIEW.tblFinanceiro.getValueAt(
                        PesquisarFinanceiroVIEW.tblFinanceiro.getSelectedRow(), 8)).equals("SAIDA")) {
                    objsaidaCTR.AlterarSaidaCTR(txtValor.getText(),
                            String.valueOf(cbxForma.getSelectedItem()), txtObservacao.getText(),
                            PesquisarFinanceiroVIEW.codigoLancamento);
                }
                JOptionPane.showMessageDialog(null, "Atualizado com sucesso!",
                        "MENSAGEM", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao Alterar Lançamento!",
                    "MENSAGEM", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void CadastrarHistoricoPagamento(){
        try {
            
            
            if(PrincipalVIEW.contasreceber == true){
                HistoricoReceberCTR objReceber = new HistoricoReceberCTR();
                objReceber.CadastrarHistoricoReceberCTR(PesquisarFinanceiroVIEW.codigoParcela,
                        txtValor.getText(), String.valueOf(cbxForma.getSelectedItem()),
                        quitar);
            }else if(PrincipalVIEW.contaspagar == true){
                HistoricoPagarCTR objPagar = new HistoricoPagarCTR();
                objPagar.CadastrarHistoricoPagarCTR(PesquisarFinanceiroVIEW.codigoParcela,
                        txtValor.getText(), String.valueOf(cbxForma.getSelectedItem()),
                        quitar);
                
            }
        } catch (Exception e) {
            System.out.println("Erro ao CadastrarHistorico "+e.getMessage());
        }
    }
    private void ConsultarFuncionario() {
        try {
            UsuarioCTR objusuarioCTR = new UsuarioCTR();
            char[] pegaSenha;
            String senha = "", usuario = "";
            pegaSenha = LogarVIEW.txtKey.getPassword();
            senha = String.valueOf(pegaSenha);
            usuario = LogarVIEW.txtUser.getText();
            ResultSet user = null;
            user = objusuarioCTR.ConsultarAcessoCTR(usuario, UtilVIEW.Criptografar(senha));
            if (user.next()) {
                func = user.getString("pessoa");

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao Consultar Funcionario",
                    "MENSAGEM", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void ConsultarLancamentos() {
        try {
            ResultSet lancamento = null;
            lancamento = objcaixaCTR.ConsultarMaiorCodigoCaixaCTR();
            if (lancamento.next()) {
                txtLancamento.setText(lancamento.getString(1));
            }

        } catch (Exception e) {
        }
    }

    private void ConsultarPlanoContas(String... tipo) {
        try {
            rs = objplanoCTR.ConsultarPlanoContasCTR(tipo[0], tipo[1]);
            UtilVIEW.PreencheCombo(rs, cbxForma, 2);
        } catch (Exception e) {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CaixaVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CaixaVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CaixaVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CaixaVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                CaixaVIEW dialog = new CaixaVIEW(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JComboBox<String> cbxForma;
    private javax.swing.ButtonGroup grupoCaixa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JCheckBox rbEntrada;
    private javax.swing.JCheckBox rbSaida;
    private javax.swing.JFormattedTextField txtData;
    private javax.swing.JTextField txtLancamento;
    private javax.swing.JTextField txtObservacao;
    private javax.swing.JTextField txtValor;
    // End of variables declaration//GEN-END:variables
}
