/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SolucaoSistemasVIEW;

import SolucaoSistemasCTR.AnimalCTR;
import SolucaoSistemasCTR.VacinaAnimalCTR;
import SolucaoSistemasDAO.ConectaBanco;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Vinicius
 */
public class AnimaisVIEW extends javax.swing.JDialog {

    AnimalCTR objanimalCTR = new AnimalCTR();
    VacinaAnimalCTR objvacinaCTR = new VacinaAnimalCTR();
    String sexo = "", disponivel = "", pedigree = "", restricao = "", morto = "",
            agressivo = "", hiperativo = "", antiSocial = "", obsessivo = "";
    public static String codigoCliente = "";
    DateFormat format = new SimpleDateFormat("yyyy-MM-dd");
    DateFormat dataFormat = new SimpleDateFormat("dd/MM/yyyy");
    ArrayList datas = new ArrayList();

    /**
     * Creates new form AnimaisVIEW
     *
     * @param parent
     * @param modal
     */
    public AnimaisVIEW(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        UtilVIEW.DataAtual(txtRegistro);
        UtilVIEW.Icone(this);
        this.setLocationRelativeTo(null);
        this.setTitle(">>>> Ficha Cadastral do Animal <<<<");
        UtilVIEW.mascaraData(txtNascAnimal);
        //   tblVacinas.setDefaultRenderer(Object.class, new ColorRenderer());
        if (PesquisaAnimaisVIEW.codigoAnimal.equals("")) {
            // btnAlterar.setEnabled(false);
            UtilVIEW.ImagemLabel("/SolucaoSistemas/src/Imagem/semFoto.JPG", lblFoto);
            txtEndereco.setText(lblFoto.getText());
            jTabbedPane1.setEnabledAt(1, false);
            
        } else {
            txtDono.setText(PesquisaAnimaisVIEW.tblPesquisaAnimal.
                    getValueAt(PesquisaAnimaisVIEW.tblPesquisaAnimal.getSelectedRow(), 6).toString());
            txtNomeAnimal.setText(PesquisaAnimaisVIEW.tblPesquisaAnimal.
                    getValueAt(PesquisaAnimaisVIEW.tblPesquisaAnimal.getSelectedRow(), 1).toString());
            if (PesquisaAnimaisVIEW.tblPesquisaAnimal.
                    getValueAt(PesquisaAnimaisVIEW.tblPesquisaAnimal.getSelectedRow(), 2).toString().equals("MACHO")) {
                rbMacho.setSelected(true);
            } else if (PesquisaAnimaisVIEW.tblPesquisaAnimal.
                    getValueAt(PesquisaAnimaisVIEW.tblPesquisaAnimal.getSelectedRow(), 2).toString().equals("FEMEA")) {
                rbFemea.setSelected(true);
            }
            txtPeso.setText(PesquisaAnimaisVIEW.tblPesquisaAnimal.
                    getValueAt(PesquisaAnimaisVIEW.tblPesquisaAnimal.getSelectedRow(), 7).toString());
            txtEspecie.setText(PesquisaAnimaisVIEW.tblPesquisaAnimal.
                    getValueAt(PesquisaAnimaisVIEW.tblPesquisaAnimal.getSelectedRow(), 3).toString());
            txtRaca.setText(PesquisaAnimaisVIEW.tblPesquisaAnimal.
                    getValueAt(PesquisaAnimaisVIEW.tblPesquisaAnimal.getSelectedRow(), 4).toString());
            txtIdentificacao.setText(PesquisaAnimaisVIEW.tblPesquisaAnimal.
                    getValueAt(PesquisaAnimaisVIEW.tblPesquisaAnimal.getSelectedRow(), 5).toString());
//            txtEndereco.setText(PesquisaAnimaisVIEW.tblPesquisaAnimal.
//                    getValueAt(PesquisaAnimaisVIEW.tblPesquisaAnimal.getSelectedRow(), 8).toString());
           
            RestaurarAnimal();
//            ConsultarVacinas();

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        opcaoSexo = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtRegistro = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDono = new javax.swing.JTextField();
        txtPesquisarDono = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtNomeAnimal = new javax.swing.JTextField();
        rbMacho = new javax.swing.JCheckBox();
        rbFemea = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPeso = new javax.swing.JTextField();
        txtNascAnimal = new javax.swing.JFormattedTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        txtIdade = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtEspecie = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtRaca = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtIdentificacao = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtEndereco = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtAlimentacao = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtFobias = new javax.swing.JTextField();
        lblFoto = new javax.swing.JLabel();
        txtPesquisarFoto = new javax.swing.JButton();
        txtPesquisarEspecie = new javax.swing.JButton();
        txtPesquisarRaca = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnIncluirVacina = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblVacinas = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        txtObservacaoVacina = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtHistoricoVeterinario = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtComportamental = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtRotina = new javax.swing.JTextArea();
        rbDisponivelTosa = new javax.swing.JCheckBox();
        rbPedigree = new javax.swing.JCheckBox();
        rbRestricoes = new javax.swing.JCheckBox();
        rbMorto = new javax.swing.JCheckBox();
        rbAgressivo = new javax.swing.JCheckBox();
        rbHiperativo = new javax.swing.JCheckBox();
        rbAntiSocial = new javax.swing.JCheckBox();
        rbObsessivo = new javax.swing.JCheckBox();
        btnFicha = new javax.swing.JButton();
        btnRelatar = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setLayout(null);

        jLabel1.setText("Data Registro:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 10, 90, 14);

        txtRegistro.setEditable(false);
        txtRegistro.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(txtRegistro);
        txtRegistro.setBounds(10, 30, 84, 20);

        jLabel2.setText("Nome do Dono / Proprietário / Cliente:");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(100, 10, 200, 14);

        txtDono.setEditable(false);
        jPanel1.add(txtDono);
        txtDono.setBounds(100, 30, 364, 20);

        txtPesquisarDono.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/Lupa_32x32.png"))); // NOI18N
        txtPesquisarDono.setText("Pesquisar");
        txtPesquisarDono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisarDonoActionPerformed(evt);
            }
        });
        jPanel1.add(txtPesquisarDono);
        txtPesquisarDono.setBounds(470, 20, 120, 36);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(4, 4, 596, 70);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(null);

        jLabel3.setText("Nome do Animal:");
        jPanel2.add(jLabel3);
        jLabel3.setBounds(10, 10, 91, 14);

        txtNomeAnimal.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.add(txtNomeAnimal);
        txtNomeAnimal.setBounds(10, 30, 290, 20);

        opcaoSexo.add(rbMacho);
        rbMacho.setText("Macho");
        rbMacho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMachoActionPerformed(evt);
            }
        });
        jPanel2.add(rbMacho);
        rbMacho.setBounds(304, 30, 60, 23);

        opcaoSexo.add(rbFemea);
        rbFemea.setText("Fêmea");
        rbFemea.setOpaque(false);
        rbFemea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbFemeaActionPerformed(evt);
            }
        });
        jPanel2.add(rbFemea);
        rbFemea.setBounds(360, 30, 60, 23);

        jLabel4.setText("DT Nascimento:");
        jPanel2.add(jLabel4);
        jLabel4.setBounds(420, 10, 90, 14);

        jLabel5.setText("Peso Atual:");
        jPanel2.add(jLabel5);
        jLabel5.setBounds(524, 10, 60, 14);

        txtPeso.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPanel2.add(txtPeso);
        txtPeso.setBounds(526, 30, 66, 20);

        txtNascAnimal.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtNascAnimal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNascAnimalKeyPressed(evt);
            }
        });
        jPanel2.add(txtNascAnimal);
        txtNascAnimal.setBounds(420, 30, 100, 20);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(4, 80, 596, 70);

        jPanel3.setLayout(null);

        txtIdade.setEditable(false);
        txtIdade.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        txtIdade.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel3.add(txtIdade);
        txtIdade.setBounds(4, 4, 260, 20);

        jLabel6.setText("Especie:");
        jPanel3.add(jLabel6);
        jLabel6.setBounds(4, 26, 60, 14);

        txtEspecie.setEditable(false);
        jPanel3.add(txtEspecie);
        txtEspecie.setBounds(4, 46, 230, 20);

        jLabel7.setText("Raça:");
        jPanel3.add(jLabel7);
        jLabel7.setBounds(4, 70, 28, 14);

        txtRaca.setEditable(false);
        jPanel3.add(txtRaca);
        txtRaca.setBounds(4, 90, 230, 20);

        jLabel8.setText("Identificação, Cor ou Pelagem:");
        jPanel3.add(jLabel8);
        jLabel8.setBounds(4, 116, 250, 14);
        jPanel3.add(txtIdentificacao);
        txtIdentificacao.setBounds(4, 136, 260, 20);

        jLabel9.setText("Endereço da foto ->               Pesquisar Foto ->");
        jPanel3.add(jLabel9);
        jLabel9.setBounds(4, 160, 240, 14);

        txtEndereco.setEditable(false);
        jPanel3.add(txtEndereco);
        txtEndereco.setBounds(4, 180, 230, 20);

        jLabel10.setText("Alimentação - qual ração - quantidade - horários (manhã, tarde, noite ou a vontade)");
        jPanel3.add(jLabel10);
        jLabel10.setBounds(4, 204, 500, 14);

        txtAlimentacao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAlimentacaoKeyPressed(evt);
            }
        });
        jPanel3.add(txtAlimentacao);
        txtAlimentacao.setBounds(4, 222, 580, 20);

        jLabel11.setText("Fobias:");
        jPanel3.add(jLabel11);
        jLabel11.setBounds(4, 244, 90, 14);
        jPanel3.add(txtFobias);
        txtFobias.setBounds(4, 260, 580, 20);

        lblFoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblFoto.setText("FOTO");
        jPanel3.add(lblFoto);
        lblFoto.setBounds(270, 2, 310, 200);

        txtPesquisarFoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/lupa_16x16.png"))); // NOI18N
        txtPesquisarFoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisarFotoActionPerformed(evt);
            }
        });
        jPanel3.add(txtPesquisarFoto);
        txtPesquisarFoto.setBounds(236, 173, 30, 30);

        txtPesquisarEspecie.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/lupa_16x16.png"))); // NOI18N
        txtPesquisarEspecie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisarEspecieActionPerformed(evt);
            }
        });
        jPanel3.add(txtPesquisarEspecie);
        txtPesquisarEspecie.setBounds(236, 40, 30, 30);

        txtPesquisarRaca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/lupa_16x16.png"))); // NOI18N
        txtPesquisarRaca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisarRacaActionPerformed(evt);
            }
        });
        jPanel3.add(txtPesquisarRaca);
        txtPesquisarRaca.setBounds(236, 83, 30, 30);

        jTabbedPane1.addTab("Informações do Animal ->", jPanel3);

        jPanel4.setLayout(null);

        btnIncluirVacina.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/proximo_32x32.png"))); // NOI18N
        btnIncluirVacina.setText("Incluir");
        btnIncluirVacina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncluirVacinaActionPerformed(evt);
            }
        });
        jPanel4.add(btnIncluirVacina);
        btnIncluirVacina.setBounds(4, 5, 113, 44);

        btnAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/Alterar_32x32.png"))); // NOI18N
        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });
        jPanel4.add(btnAlterar);
        btnAlterar.setBounds(4, 54, 113, 44);

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/sair_32x32.png"))); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        jPanel4.add(btnExcluir);
        btnExcluir.setBounds(4, 104, 113, 44);

        tblVacinas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Descrição:", "Dose:", "Aplicar em:"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblVacinas);

        jPanel4.add(jScrollPane1);
        jScrollPane1.setBounds(130, 10, 452, 220);

        jLabel13.setText("Observações sobre as vacinas:");
        jPanel4.add(jLabel13);
        jLabel13.setBounds(4, 234, 170, 14);
        jPanel4.add(txtObservacaoVacina);
        txtObservacaoVacina.setBounds(4, 254, 580, 20);

        jTabbedPane1.addTab("Relação das Vacinas ->", jPanel4);

        jPanel5.setLayout(null);

        txtHistoricoVeterinario.setColumns(20);
        txtHistoricoVeterinario.setLineWrap(true);
        txtHistoricoVeterinario.setRows(5);
        jScrollPane2.setViewportView(txtHistoricoVeterinario);

        jPanel5.add(jScrollPane2);
        jScrollPane2.setBounds(10, 11, 571, 264);

        jTabbedPane1.addTab("Histórico Veterinário ->", jPanel5);

        jPanel6.setLayout(null);

        txtComportamental.setColumns(20);
        txtComportamental.setLineWrap(true);
        txtComportamental.setRows(5);
        jScrollPane3.setViewportView(txtComportamental);

        jPanel6.add(jScrollPane3);
        jScrollPane3.setBounds(10, 11, 571, 264);

        jTabbedPane1.addTab("Obs Comportamental ->", jPanel6);

        jPanel7.setLayout(null);

        txtRotina.setColumns(20);
        txtRotina.setLineWrap(true);
        txtRotina.setRows(5);
        jScrollPane4.setViewportView(txtRotina);

        jPanel7.add(jScrollPane4);
        jScrollPane4.setBounds(10, 11, 571, 264);

        jTabbedPane1.addTab("Obs de Rotina", jPanel7);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(4, 156, 596, 314);

        rbDisponivelTosa.setText("Disponível para tosa");
        getContentPane().add(rbDisponivelTosa);
        rbDisponivelTosa.setBounds(0, 480, 130, 23);

        rbPedigree.setText("Possui Pedigree");
        getContentPane().add(rbPedigree);
        rbPedigree.setBounds(0, 500, 100, 23);

        rbRestricoes.setText("Restrições / Problemas");
        getContentPane().add(rbRestricoes);
        rbRestricoes.setBounds(0, 520, 140, 23);

        rbMorto.setText("Morto / Falecido");
        getContentPane().add(rbMorto);
        rbMorto.setBounds(0, 540, 110, 23);

        rbAgressivo.setText("Agressivo");
        getContentPane().add(rbAgressivo);
        rbAgressivo.setBounds(140, 480, 80, 23);

        rbHiperativo.setText("Hiperativo");
        getContentPane().add(rbHiperativo);
        rbHiperativo.setBounds(140, 500, 90, 23);

        rbAntiSocial.setText("Anti Social");
        rbAntiSocial.setOpaque(false);
        getContentPane().add(rbAntiSocial);
        rbAntiSocial.setBounds(140, 520, 80, 23);

        rbObsessivo.setText("Obsessivo");
        getContentPane().add(rbObsessivo);
        rbObsessivo.setBounds(140, 540, 75, 23);

        btnFicha.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/patavermelha.JPG"))); // NOI18N
        btnFicha.setText("Emitir Ficha Cadastral");
        btnFicha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFichaActionPerformed(evt);
            }
        });
        getContentPane().add(btnFicha);
        btnFicha.setBounds(230, 476, 180, 44);

        btnRelatar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/Imprimir_32x32.png"))); // NOI18N
        btnRelatar.setText("Relatar Atendimentos");
        getContentPane().add(btnRelatar);
        btnRelatar.setBounds(230, 526, 180, 44);

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/disquete_32x32.png"))); // NOI18N
        btnSalvar.setText("Salvar Cadastro");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        getContentPane().add(btnSalvar);
        btnSalvar.setBounds(416, 476, 180, 44);

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/casa_32x32.png"))); // NOI18N
        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });
        getContentPane().add(btnSair);
        btnSair.setBounds(416, 526, 180, 44);

        setBounds(0, 0, 621, 613);
    }// </editor-fold>//GEN-END:initComponents

    private void txtNascAnimalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNascAnimalKeyPressed
        try {
            if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
                if(txtNascAnimal.getText().equals("  /  /    ")){
                    
                }else{
                    UtilVIEW.CalcularIdade(txtIdade, dataFormat.parse(txtNascAnimal.getText()));
                }
                
                txtPeso.requestFocusInWindow();
            }
        } catch (Exception e) {
        }


    }//GEN-LAST:event_txtNascAnimalKeyPressed

    private void txtAlimentacaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAlimentacaoKeyPressed
        try {
            if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
                txtFobias.requestFocusInWindow();
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_txtAlimentacaoKeyPressed
    public static boolean incluiVacinas = false;
    private void btnIncluirVacinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncluirVacinaActionPerformed
        PrincipalVIEW.cliente = false;

        incluiVacinas = true;
        new PesquisaDiversosVIEW(null, true).setVisible(true);

    }//GEN-LAST:event_btnIncluirVacinaActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        try {
//            AlterarVacinas();
//            lista.clear();
            //ConsultarVacinas();
             RemoverLinha();
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Selecionar a vacina!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        try {
            int questao = JOptionPane.showConfirmDialog(null, "Deseja excluir a vacina?",
                    "PERGUNTA", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (questao == 0) {
                if (PesquisaAnimaisVIEW.codigoAnimal.equals("")) {
                    RemoverLinha();
                } else {
                    ExcluirVacina();
                    RemoverLinha();
                    lista.clear();
                   // ConsultarVacinas();
                }

            } else if (questao == 1) {

            }

        } catch (NullPointerException e) {
            System.out.println("" + e.getMessage());

        } catch (ArrayIndexOutOfBoundsException e1) {
            JOptionPane.showMessageDialog(null, "Selecionar a vacina!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnExcluirActionPerformed

    private void txtPesquisarFotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisarFotoActionPerformed
        UtilVIEW.Imagem(lblFoto);
        txtEndereco.setText(lblFoto.getText());
    }//GEN-LAST:event_txtPesquisarFotoActionPerformed

    private void txtPesquisarDonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisarDonoActionPerformed
        PrincipalVIEW.cliente = true;
        new PesquisaDiversosVIEW(null, true).setVisible(true);
    }//GEN-LAST:event_txtPesquisarDonoActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        try {
            if (PesquisaAnimaisVIEW.codigoAnimal.equals("")) {
                CadastrarAnimalVIEW();

            } else {
                AlterarAnimalVIEW();
                if(txtEndereco.getText().equals("")){
                    
                }else{
                    AlterarImagemAnimal();
                }
                CadastrarVacinas();
                
            }

            datas.clear();
            this.dispose();
        } catch (Exception e) {
            System.out.println("" + e.getMessage());
        }


    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        int sair = -1;
        sair = JOptionPane.showConfirmDialog(null, "Deseja sair?", "MENSAGEM",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (sair == 0) {
            incluiVacinas = false;
            PesquisaAnimaisVIEW.codigoAnimal = "";
            this.dispose();
        } else {

        }
    }//GEN-LAST:event_btnSairActionPerformed

    private void rbMachoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMachoActionPerformed
        txtNascAnimal.requestFocusInWindow();
    }//GEN-LAST:event_rbMachoActionPerformed

    private void rbFemeaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbFemeaActionPerformed
        txtNascAnimal.requestFocusInWindow();
    }//GEN-LAST:event_rbFemeaActionPerformed

    private void txtPesquisarEspecieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisarEspecieActionPerformed
        PrincipalVIEW.especie = true;
        new PesquisaDiversosVIEW(null, true).setVisible(true);
    }//GEN-LAST:event_txtPesquisarEspecieActionPerformed

    private void txtPesquisarRacaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisarRacaActionPerformed
        PrincipalVIEW.raca = true;
        new PesquisaDiversosVIEW(null, true).setVisible(true);
    }//GEN-LAST:event_txtPesquisarRacaActionPerformed

    private void btnFichaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFichaActionPerformed
        ImprimirAnimal();
    }//GEN-LAST:event_btnFichaActionPerformed

    private void RemoverLinha() {
        try {
            DefaultTableModel modelo = (DefaultTableModel) tblVacinas.getModel();
            modelo.removeRow(tblVacinas.getSelectedRow());
            tblVacinas.setModel(modelo);
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Selecionar a vacina!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }

    }

    private void CadastrarAnimalVIEW() {
        try {
            if (rbMacho.isSelected() == true) {
                sexo = "MACHO";
            } else if (rbFemea.isSelected() == true) {
                sexo = "FEMEA";
            }
            if (rbDisponivelTosa.isSelected() == true) {
                disponivel = "X";
            } else if (rbDisponivelTosa.isSelected() == false) {
                disponivel = "";
            }
            if (rbPedigree.isSelected() == true) {
                pedigree = "X";
            } else if (rbPedigree.isSelected() == false) {
                pedigree = "";
            }
            if (rbRestricoes.isSelected() == true) {
                restricao = "X";
            } else if (rbRestricoes.isSelected() == false) {
                restricao = "";
            }

            if (rbMorto.isSelected() == true) {
                morto = "X";
            } else if (rbMorto.isSelected() == false) {
                morto = "";
            }
            if (rbAgressivo.isSelected() == true) {
                agressivo = "X";
            } else if (rbAgressivo.isSelected() == false) {
                agressivo = "";
            }
            if (rbHiperativo.isSelected() == true) {
                hiperativo = "X";
            } else if (rbHiperativo.isSelected() == false) {
                hiperativo = "";
            }
            if (rbAntiSocial.isSelected() == true) {
                antiSocial = "X";
            } else if (rbAntiSocial.isSelected() == false) {
                antiSocial = "";
            }
            if (rbObsessivo.isSelected() == true) {
                obsessivo = "X";
            } else if (rbObsessivo.isSelected() == false) {
                obsessivo = "";
            }
            if (objanimalCTR.CadastrarAnimalCTR(txtNomeAnimal.getText().toUpperCase(), codigoCliente,
                    sexo, txtNascAnimal.getText(), txtPeso.getText(), txtEspecie.getText(),
                    txtRaca.getText(), txtIdentificacao.getText().toUpperCase(),
                    txtEndereco.getText(), txtAlimentacao.getText().toUpperCase(),
                    txtFobias.getText().toUpperCase(), disponivel, pedigree, restricao,
                    morto, agressivo, hiperativo, antiSocial, obsessivo,
                    txtHistoricoVeterinario.getText().toUpperCase(),
                    txtComportamental.getText().toUpperCase(), txtRotina.getText().toUpperCase(),
                    txtObservacaoVacina.getText().toUpperCase())) {
                JOptionPane.showMessageDialog(null, "Salvo com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao Salvar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
            System.out.println("AQUI "+e.getMessage());
        }
    }

    private void AlterarAnimalVIEW() {
        try {
            if (rbMacho.isSelected() == true) {
                sexo = "MACHO";
            } else if (rbFemea.isSelected() == true) {
                sexo = "FEMEA";
            }
            if (rbDisponivelTosa.isSelected() == true) {
                disponivel = "X";
            } else if (rbDisponivelTosa.isSelected() == false) {
                disponivel = "";
            }
            if (rbPedigree.isSelected() == true) {
                pedigree = "X";
            } else if (rbPedigree.isSelected() == false) {
                pedigree = "";
            }
            if (rbRestricoes.isSelected() == true) {
                restricao = "X";
            } else if (rbRestricoes.isSelected() == false) {
                restricao = "";
            }

            if (rbMorto.isSelected() == true) {
                morto = "X";
            } else if (rbMorto.isSelected() == false) {
                morto = "";
            }
            if (rbAgressivo.isSelected() == true) {
                agressivo = "X";
            } else if (rbAgressivo.isSelected() == false) {
                agressivo = "";
            }
            if (rbHiperativo.isSelected() == true) {
                hiperativo = "X";
            } else if (rbHiperativo.isSelected() == false) {
                hiperativo = "";
            }
            if (rbAntiSocial.isSelected() == true) {
                antiSocial = "X";
            } else if (rbAntiSocial.isSelected() == false) {
                antiSocial = "";
            }
            if (rbObsessivo.isSelected() == true) {
                obsessivo = "X";
            } else if (rbObsessivo.isSelected() == false) {
                obsessivo = "";
            }
            if (objanimalCTR.AlterarAnimalCTR(txtNomeAnimal.getText().toUpperCase(),
                    sexo, txtNascAnimal.getText(), txtPeso.getText(), txtEspecie.getText(),
                    txtRaca.getText(), txtIdentificacao.getText().toUpperCase(),
                    txtAlimentacao.getText().toUpperCase(),
                    txtFobias.getText().toUpperCase(), disponivel, pedigree, restricao,
                    morto, agressivo, hiperativo, antiSocial, obsessivo,
                    txtHistoricoVeterinario.getText().toUpperCase(),
                    txtComportamental.getText().toUpperCase(), txtRotina.getText().toUpperCase(),
                    txtObservacaoVacina.getText().toUpperCase(), PesquisaAnimaisVIEW.codigoAnimal)) {
                JOptionPane.showMessageDialog(null, "Atualizado com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao Salvar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    ArrayList lista = new ArrayList();

    private void ExcluirVacina() {
        try {

            if (objvacinaCTR.ExcluirVacinaCTR(lista.get(tblVacinas.getSelectedRow()).toString())) {
                JOptionPane.showMessageDialog(null, "Excluída com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            // JOptionPane.showMessageDialog(null, "Erro ao Excluir", "MENSAGEM", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void RestaurarAnimal() {
        try {
            ResultSet restaura = null;
            restaura = objanimalCTR.ConsultarAnimalCTR("null", "null", "1",
                    PesquisaAnimaisVIEW.codigoAnimal);
           
            if (restaura.next()) {
                txtAlimentacao.setText(restaura.getString("alimentacao"));
                txtFobias.setText(restaura.getString("fobia"));
                if (restaura.getString("disponivel_tosa").equals("X")) {
                    rbDisponivelTosa.setSelected(true);
                } else if (restaura.getString("disponivel_tosa").equals("")) {
                    rbDisponivelTosa.setSelected(false);
                }

                if (restaura.getString("possui_pedigree").equals("X")) {
                    rbPedigree.setSelected(true);
                } else if (restaura.getString("possui_pedigree").equals("")) {
                    rbPedigree.setSelected(false);
                }
                if (restaura.getString("restricao").equals("X")) {
                    rbRestricoes.setSelected(true);
                } else if (restaura.getString("restricao").equals("")) {
                    rbRestricoes.setSelected(false);
                }
                if (restaura.getString("falecido").equals("X")) {
                    rbMorto.setSelected(true);
                } else if (restaura.getString("falecido").equals("")) {
                    rbMorto.setSelected(false);
                }

                if (restaura.getString("agressivo").equals("X")) {
                    rbAgressivo.setSelected(true);
                } else if (restaura.getString("agressivo").equals("")) {
                    rbAgressivo.setSelected(false);
                }

                if (restaura.getString("hiperativo").equals("X")) {
                    rbHiperativo.setSelected(true);
                } else if (restaura.getString("hiperativo").equals("")) {
                    rbHiperativo.setSelected(false);
                }

                if (restaura.getString("anti_social").equals("X")) {
                    rbAntiSocial.setSelected(true);
                } else if (restaura.getString("anti_social").equals("")) {
                    rbAntiSocial.setSelected(false);
                }

                if (restaura.getString("obsessivo").equals("X")) {
                    rbObsessivo.setSelected(true);
                } else if (restaura.getString("obsessivo").equals("")) {
                    rbObsessivo.setSelected(false);
                }
                txtObservacaoVacina.setText(restaura.getString("observacao"));
                txtHistoricoVeterinario.setText(restaura.getString("historico"));
                txtComportamental.setText(restaura.getString("comportamento"));
                txtRotina.setText(restaura.getString("rotina"));
                if(restaura.getString("nascimento").equals("  /  /    ")){
                    
                }else{
                    txtNascAnimal.setText(restaura.getString("nascimento"));
                     UtilVIEW.CalcularIdade(txtIdade, dataFormat.parse(restaura.getString("nascimento")));         
                }
                
               
                UtilVIEW.CarregaLabel(lblFoto, restaura, "foto");
               // txtEndereco.setText(restaura.getString("foto"));
               //  txtEndereco.setText(Base64.encodeBytes(restaura.getBytes("foto")));

            }
        } catch (SQLException | ParseException e) {
            JOptionPane.showMessageDialog(null, "Erro ao restaurar Animal", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
            System.out.println("" + e.getMessage());
        }
    }

    private void AlterarImagemAnimal(){
        try {
            objanimalCTR.AlterarImagemAnimalCTR(txtEndereco.getText(), PesquisaAnimaisVIEW.codigoAnimal);
            System.out.println("Imagem Atualizada com sucesso!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao alterar a imagem!", "MENSAGEM", 
                    JOptionPane.WARNING_MESSAGE);
        }
    }
    private void CadastrarVacinas() {
        try {

            datas.clear();
            int i = 0;
            while (i < tblVacinas.getRowCount()) {
                datas.add(dataFormat.parse(tblVacinas.getValueAt(i, 2).toString()));
                objvacinaCTR.CadastrarVacinaAnimalCTR(tblVacinas.getValueAt(i, 0).toString(),
                        format.format(datas.get(i)),
                        tblVacinas.getValueAt(i, 1).toString(),
                        PesquisaAnimaisVIEW.codigoAnimal);
                i++;
            }

        } catch (NullPointerException e) {
            System.out.println("" + e.getMessage());
        } catch (ParseException ex) {
           // Logger.getLogger(AnimaisVIEW.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ImprimirAnimal(){
        try {
            int op = -1;
            op = JOptionPane.showConfirmDialog(null, "Impressora esta ligada?", "PERGUNTA",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (op == 0) {
                this.dispose();
                URL arquiv = getClass().getResource("/Relatorios/AnimalIndividual.jasper");

                //JOptionPane.showMessageDialog(this, arquivo.toString());
                if (arquiv == null) {
                    System.out.println("ARQUIVO INEXISTENTE");
                } else {

                    ConectaBanco.ConectaPostgres();

                    JasperPrint rel = null;
                    Map parametros = new HashMap();
                   
                    parametros.put("cod", PesquisaAnimaisVIEW.codigoAnimal);
                    JasperReport jr;
                    try {
                        jr = (JasperReport) JRLoader.loadObject(arquiv);
                        rel = JasperFillManager.fillReport(jr, parametros, ConectaBanco.con);
                        JasperViewer.viewReport(rel, false);
                    } catch (JRException ex) {
                        System.out.println("" + ex.getMessage());
                    }

                }
            } else if (op == 1) {

            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Mensagem UtilVIEW " + e.getMessage());
        }
    }
    private void AlterarVacinas() {
        try {

           // DateFormat dataFormat = new SimpleDateFormat("dd/MM/yyyy");
            datas.clear();

            datas.add(dataFormat.parse(tblVacinas.getValueAt(tblVacinas.getSelectedRow(), 2).toString()));
            if (objvacinaCTR.AlterarVacinaAnimalCTR(tblVacinas.getValueAt(
                    tblVacinas.getSelectedRow(), 0).toString(),
                    format.format(datas.get(tblVacinas.getSelectedRow()).toString()),
                    tblVacinas.getValueAt(tblVacinas.getSelectedRow(), 2).toString(),
                    lista.get(tblVacinas.getSelectedRow()).toString())) {
                JOptionPane.showMessageDialog(null, "Atualizado com sucesso!",
                        "MENSAGEM", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (ParseException | HeadlessException e) {
            JOptionPane.showMessageDialog(null, "Erro ao Atualizar!",
                    "MENSAGEM", JOptionPane.WARNING_MESSAGE);
        }
    }

   

    private void RestaurarVacinas(ResultSet rs) {
        try {
            DefaultTableModel table = (DefaultTableModel) tblVacinas.getModel();
            table.setRowCount(0);
            lista.clear();
            while (rs.next()) {
                lista.add(rs.getString("codigo"));
                table.addRow(new Object[]{rs.getString("vacina"), rs.getString("dose"),
                    rs.getString("aplica")});
            }
            tblVacinas.setModel(table);
        } catch (Exception e) {
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnimaisVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnimaisVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnimaisVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnimaisVIEW.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                AnimaisVIEW dialog = new AnimaisVIEW(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnFicha;
    private javax.swing.JButton btnIncluirVacina;
    private javax.swing.JButton btnRelatar;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblFoto;
    private javax.swing.ButtonGroup opcaoSexo;
    private javax.swing.JCheckBox rbAgressivo;
    private javax.swing.JCheckBox rbAntiSocial;
    private javax.swing.JCheckBox rbDisponivelTosa;
    private javax.swing.JCheckBox rbFemea;
    private javax.swing.JCheckBox rbHiperativo;
    private javax.swing.JCheckBox rbMacho;
    private javax.swing.JCheckBox rbMorto;
    private javax.swing.JCheckBox rbObsessivo;
    private javax.swing.JCheckBox rbPedigree;
    private javax.swing.JCheckBox rbRestricoes;
    public static javax.swing.JTable tblVacinas;
    private javax.swing.JTextField txtAlimentacao;
    private javax.swing.JTextArea txtComportamental;
    public static javax.swing.JTextField txtDono;
    private javax.swing.JTextField txtEndereco;
    public static javax.swing.JTextField txtEspecie;
    private javax.swing.JTextField txtFobias;
    private javax.swing.JTextArea txtHistoricoVeterinario;
    private javax.swing.JTextField txtIdade;
    private javax.swing.JTextField txtIdentificacao;
    private javax.swing.JFormattedTextField txtNascAnimal;
    public static javax.swing.JTextField txtNomeAnimal;
    private javax.swing.JTextField txtObservacaoVacina;
    private javax.swing.JTextField txtPeso;
    private javax.swing.JButton txtPesquisarDono;
    private javax.swing.JButton txtPesquisarEspecie;
    private javax.swing.JButton txtPesquisarFoto;
    private javax.swing.JButton txtPesquisarRaca;
    public static javax.swing.JTextField txtRaca;
    private javax.swing.JFormattedTextField txtRegistro;
    private javax.swing.JTextArea txtRotina;
    // End of variables declaration//GEN-END:variables
}
