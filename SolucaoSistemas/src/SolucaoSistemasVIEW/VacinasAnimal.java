/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SolucaoSistemasVIEW;

import SolucaoSistemasCTR.CategoriaCTR;
import SolucaoSistemasCTR.EspecieCTR;
import SolucaoSistemasCTR.MarcaCTR;
import SolucaoSistemasCTR.RacaCTR;
import SolucaoSistemasCTR.UnidadeMedidaCTR;
import SolucaoSistemasCTR.VacinasCTR;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vinicius
 */
public class VacinasAnimal extends javax.swing.JDialog {

    VacinasCTR objvacinaCTR = new VacinasCTR();
    String situacao = "", pegaCodigo = "";
    DateFormat dataFormatada = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form VacinasAnimal
     *
     * @param parent
     * @param modal
     */
    public VacinasAnimal(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        if (PrincipalVIEW.raca == true || AtendimentoVIEW.racaAtendimento == true) {
            this.setTitle("CADASTRO DE RACA");
            txtDose.setVisible(false);
            txtAplicar.setVisible(false);
            lblDose.setVisible(false);
            lblAplicar.setVisible(false);
        } else if (PrincipalVIEW.especie == true || AtendimentoVIEW.especieAtendimento == true) {
            this.setTitle("CADASTRO DE ESPECIE");
            txtDose.setVisible(false);
            txtAplicar.setVisible(false);
            lblDose.setVisible(false);
            lblAplicar.setVisible(false);
        } else if (AnimaisVIEW.incluiVacinas == true) {
            this.setTitle("CADASTRO DE VACINAS");
        } else if (ProdutosServicosVIEW.unidade == true) {
            this.setTitle("CADASTRO DE UNIDADE DE MEDIDA");
            txtDose.setVisible(false);
            txtAplicar.setVisible(false);
            lblDose.setVisible(false);
            lblAplicar.setVisible(false);
            txtDescricao.setDocument(new FixedLenghtDocument(2));
            txtDescricao.setSize(40, 20);
            this.setSize(200, 130);
            rbSituacao.setBounds(70, 31, 100, 20);
            lblSituacao.setBounds(70, 9, 48, 20);
            btnSalvar.setBounds(4, 57, 90, 30);

        } else if (ProdutosServicosVIEW.marca == true) {
            this.setTitle("CADASTRO DE MARCAS");
        //     this.setTitle("CADASTRO DE UNIDADE DE MEDIDA");
            txtDose.setVisible(false);
            txtAplicar.setVisible(false);
            lblDose.setVisible(false);
            lblAplicar.setVisible(false);
           //  this.setSize(200, 130);
//            rbSituacao.setBounds(70, 31, 100, 20);
//            lblSituacao.setBounds(70, 9, 48, 20);
         btnSalvar.setBounds(10, 77, 90, 30);
            //txtDescricao.setSize(100, 40);
        } else if (ProdutosServicosVIEW.categoria == true) {
            this.setTitle("CADASTRO DE GRUPO/CATEGORIA");
            // this.setTitle("CADASTRO DE UNIDADE DE MEDIDA");
            txtDose.setVisible(false);
            txtAplicar.setVisible(false);
            lblDose.setVisible(false);
            lblAplicar.setVisible(false);
           //  this.setSize(200, 130);
//            rbSituacao.setBounds(70, 31, 100, 20);
//            lblSituacao.setBounds(70, 9, 48, 20);
            btnSalvar.setBounds(10, 77, 90, 30);
           // txtDescricao.setSize(100, 40);

        }

        rbSituacao.setSelected(true);
        if (PesquisaDiversosVIEW.codigoVacina.equals("")) {

        } else {
            txtDescricao.setText(PesquisaDiversosVIEW.tblPesquisa.getValueAt(
                    PesquisaDiversosVIEW.tblPesquisa.getSelectedRow(), 1).toString());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtDescricao = new javax.swing.JTextField();
        lblDose = new javax.swing.JLabel();
        txtDose = new javax.swing.JTextField();
        lblAplicar = new javax.swing.JLabel();
        txtAplicar = new com.toedter.calendar.JDateChooser();
        lblSituacao = new javax.swing.JLabel();
        rbSituacao = new javax.swing.JCheckBox();
        btnSalvar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setLayout(null);

        jLabel1.setText("Descrição:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 11, 79, 14);

        txtDescricao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDescricaoKeyPressed(evt);
            }
        });
        jPanel1.add(txtDescricao);
        txtDescricao.setBounds(10, 31, 330, 20);

        lblDose.setText("Dose:");
        jPanel1.add(lblDose);
        lblDose.setBounds(10, 57, 87, 14);
        jPanel1.add(txtDose);
        txtDose.setBounds(10, 77, 140, 20);

        lblAplicar.setText("Aplicar em:");
        jPanel1.add(lblAplicar);
        lblAplicar.setBounds(156, 57, 80, 14);
        jPanel1.add(txtAplicar);
        txtAplicar.setBounds(156, 77, 126, 20);

        lblSituacao.setText("Situação:");
        jPanel1.add(lblSituacao);
        lblSituacao.setBounds(295, 57, 48, 14);

        rbSituacao.setText("Ativo");
        jPanel1.add(rbSituacao);
        rbSituacao.setBounds(292, 77, 51, 23);

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagem/disquete_16x16.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });
        jPanel1.add(btnSalvar);
        btnSalvar.setBounds(10, 110, 83, 25);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 350, 140);

        setBounds(0, 0, 368, 177);
    }// </editor-fold>//GEN-END:initComponents

    private void txtDescricaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescricaoKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            txtDose.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtDescricaoKeyPressed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        if (txtDescricao.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Preencher o campo descricao!",
                    "MENSAGEM", JOptionPane.INFORMATION_MESSAGE);
        } else {
            if (rbSituacao.isSelected() == true) {
                situacao = "ATIVO";
            } else if (rbSituacao.isSelected() == false) {
                situacao = "INATIVO";
            }
            if (PesquisaDiversosVIEW.codigoVacina.equals("")) {
                if (PrincipalVIEW.especie == true || AtendimentoVIEW.especieAtendimento == true) {
                    CadastrarEsperie();
                   // PrincipalVIEW.especie = false;
                } else if (PrincipalVIEW.raca == true || AtendimentoVIEW.racaAtendimento == true) {
                    CadastrarRaca();
                    //PrincipalVIEW.raca = false;
                } else if (AnimaisVIEW.incluiVacinas == true) {
                    CadastrarVacinaVIEW();
                    InserirVacinas();
                   // AnimaisVIEW.incluiVacinas = false;
                } else if (ProdutosServicosVIEW.marca == true) {
                    CadastrarMarca();
                   // ProdutosServicosVIEW.marca = false;
                } else if (ProdutosServicosVIEW.categoria == true) {
                    CadastrarCategoria();
                    //ProdutosServicosVIEW.categoria = false;
                } else if (ProdutosServicosVIEW.unidade == true) {
                    CadastrarUnidadeMedida();
                    //ProdutosServicosVIEW.unidade = false;
                }

            } else {
                if (PrincipalVIEW.especie == true || AtendimentoVIEW.especieAtendimento == true) {
                    AlterarEspecie();
                 //   PrincipalVIEW.especie = false;
                } else if (PrincipalVIEW.raca == true || AtendimentoVIEW.racaAtendimento == true) {
                    AlterarRaca();
                   // PrincipalVIEW.raca = false;
                } else if (AnimaisVIEW.incluiVacinas == true) {
                    AlterarVacinaVIEW();
                    InserirVacinas();
                    //AnimaisVIEW.incluiVacinas = false;
                } else if (ProdutosServicosVIEW.marca == true) {
                    AlterarMarca();
                } else if (ProdutosServicosVIEW.categoria == true) {
                    AlterarCategoria();
                  //  ProdutosServicosVIEW.categoria = false;
                } else if (ProdutosServicosVIEW.unidade == true) {
                    AlterarUnidade();
                  //  ProdutosServicosVIEW.unidade = false;
                }

            }

            PesquisaDiversosVIEW.codigoVacina = "";
            pegaCodigo = "";
            situacao = "";
            this.dispose();
        }


    }//GEN-LAST:event_btnSalvarActionPerformed

    private void CadastrarVacinaVIEW() {
        try {

            objvacinaCTR.CadastrarVacinasCTR(txtDescricao.getText().toUpperCase(), situacao);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar", "MENSAGEM", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void AlterarVacinaVIEW() {
        try {

            objvacinaCTR.AlterarVacinasCTR(txtDescricao.getText().toUpperCase(),
                    situacao, PesquisaDiversosVIEW.codigoVacina);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar!", "MENSAGEM", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void InserirVacinas() {
        try {
            ResultSet maiorCodigo = null;

            if (PesquisaDiversosVIEW.codigoVacina.equals("")) {
                maiorCodigo = objvacinaCTR.ConsultarMaiorCodigoVacinasCTR();
                if (maiorCodigo.next()) {
                    pegaCodigo = maiorCodigo.getString(1);
                }
            } else {
                pegaCodigo = PesquisaDiversosVIEW.codigoVacina;
            }
            DefaultTableModel modelo = (DefaultTableModel) AnimaisVIEW.tblVacinas.getModel();
            modelo.addRow(new Object[]{txtDescricao.getText(), txtDose.getText(),
                dataFormatada.format(txtAplicar.getDate())});
            AnimaisVIEW.tblVacinas.setModel(modelo);

        } catch (Exception e) {
            System.out.println("" + e.getMessage());
        }
    }

    private void CadastrarUnidadeMedida() {
        try {
            UnidadeMedidaCTR objunidadeCTR = new UnidadeMedidaCTR();

            if (objunidadeCTR.CadastrarUnidadeCTR(txtDescricao.getText().toUpperCase(), situacao)) {
                JOptionPane.showMessageDialog(null, "Salvo com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void AlterarUnidade() {
        try {
            UnidadeMedidaCTR objunidadeCTR = new UnidadeMedidaCTR();

            if (objunidadeCTR.AlterarUnidadeCTR(txtDescricao.getText().toUpperCase(),
                    situacao, PesquisaDiversosVIEW.codigoVacina)) {
                JOptionPane.showMessageDialog(null, "Atualizado com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void CadastrarMarca() {
        try {
            MarcaCTR objmarcaCTR = new MarcaCTR();

            if (objmarcaCTR.CadastrarMarcaCTR(txtDescricao.getText().toUpperCase(), situacao)) {
                JOptionPane.showMessageDialog(null, "Salvo com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void AlterarEspecie(){
        try {
            EspecieCTR objespecieCTR = new EspecieCTR();
            if(objespecieCTR.AlterarEspecieCTR(txtDescricao.getText().toUpperCase(), situacao,
                    PesquisaDiversosVIEW.codigoVacina)){
                JOptionPane.showMessageDialog(null, "Atualizado com sucesso!", "MENSAGEM", 
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar!", "MENSAGEM", 
                    JOptionPane.WARNING_MESSAGE);
        }
    }
    private void AlterarRaca(){
        try {
            RacaCTR objracaCTR = new RacaCTR();
            if(objracaCTR.AlterarRacaCTR(txtDescricao.getText().toUpperCase(), situacao,
                    PesquisaDiversosVIEW.codigoVacina)){
                JOptionPane.showMessageDialog(null, "Atualizado com sucesso!", "MENSAGEM", 
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar!", "MENSAGEM", 
                    JOptionPane.WARNING_MESSAGE);
        }
    }
    private void AlterarMarca() {
        try {
            MarcaCTR objmarcaCTR = new MarcaCTR();

            if (objmarcaCTR.AlterarMarcaCTR(txtDescricao.getText().toUpperCase(), situacao,
                    PesquisaDiversosVIEW.codigoVacina)) {
                JOptionPane.showMessageDialog(null, "Atualizado com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void CadastrarCategoria() {
        try {
            CategoriaCTR objcategoriaCTR = new CategoriaCTR();
            if (objcategoriaCTR.CadastrarCategoriaCTR(txtDescricao.getText().toUpperCase(), situacao)) {
                JOptionPane.showMessageDialog(null, "Salvo com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao Salvar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void AlterarCategoria() {
        try {
            CategoriaCTR objcategoriaCTR = new CategoriaCTR();
            if (objcategoriaCTR.AlterarCategoriaCTR(txtDescricao.getText().toUpperCase(),
                    situacao, PesquisaDiversosVIEW.codigoVacina)) {
                JOptionPane.showMessageDialog(null, "Atualizado com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void CadastrarRaca() {
        try {
            RacaCTR objracaCTR = new RacaCTR();

            if (objracaCTR.CadastrarRacaCTR(txtDescricao.getText().toUpperCase(), situacao)) {
                JOptionPane.showMessageDialog(null, "Salvo com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void AtualizarRaca() {
        try {
            RacaCTR objracaCTR = new RacaCTR();

            if (objracaCTR.AlterarRacaCTR(txtDescricao.getText().toUpperCase(),
                    situacao, PesquisaDiversosVIEW.codigoVacina)) {
                JOptionPane.showMessageDialog(null, "Atualizado com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void CadastrarEsperie() {
        try {
            EspecieCTR objespecieCTR = new EspecieCTR();

            if (objespecieCTR.CadastrarEspecieCTR(txtDescricao.getText().toUpperCase(), situacao)) {
                JOptionPane.showMessageDialog(null, "Salvo com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    private void AtualizarEspecie() {
        try {
            EspecieCTR objespecieCTR = new EspecieCTR();

            if (objespecieCTR.CadastrarEspecieCTR(txtDescricao.getText().toUpperCase(),
                    situacao, PesquisaDiversosVIEW.codigoVacina)) {
                JOptionPane.showMessageDialog(null, "Atualizado com sucesso!", "MENSAGEM",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar!", "MENSAGEM",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VacinasAnimal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VacinasAnimal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VacinasAnimal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VacinasAnimal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                VacinasAnimal dialog = new VacinasAnimal(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAplicar;
    private javax.swing.JLabel lblDose;
    private javax.swing.JLabel lblSituacao;
    private javax.swing.JCheckBox rbSituacao;
    private com.toedter.calendar.JDateChooser txtAplicar;
    public static javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtDose;
    // End of variables declaration//GEN-END:variables
}
